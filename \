import Data.Maybe (fromJust)
import Data.List 
import Control.Monad

main = do
  line <- getLine
  if line == "0"
     then return ()
     else do list1 <- replicateM (read line) getLine
             list2 <- replicateM (read line) getLine
             let [listA :: [Int], listB :: [Int]] = [map read list1, map read list2]
             let [sortA, sortB] = [sort listA, sort listB]
             let finalB = map (\(x, _) -> sortB !! (fromJust $ elemIndex x sortA)) $ zip listA listB
             mapM_ print finalB
             main

